#! /usr/bin/env python

'''
Organise rolls in directories
'''

import sys, os
import argparse
import shutil
import logging
import xml.etree.ElementTree as ET
import ephoto

DESC = "Organise rolls in directories"

def move(srcdir, rolls, key, path, modified):
    '''
    Make directories and move files
    '''

    path = path.text
    src = path.split('/', 5)[-1]
    img = src.split('/', 1)[-1]
    dstdir, filename = img.rsplit('/', 1)

    if modified:
        dstdir = dstdir + '/Modified'

    # Make directories
    try:
        logging.info('mkdir %s/%s', rolls[key], dstdir)
        os.makedirs('%s/%s' % (rolls[key],
                               dstdir))
    except OSError:
        pass

    # Move file
    dst = "%s/%s/%s" % (rolls[key], dstdir, filename)
    if os.path.exists(dst):
        logging.warning("%s already exists", dst)
    else:
        logging.info("mv %s/%s %s", srcdir, src, dst)
        try:
            shutil.move('%s/%s' % (srcdir, src), dst)
        except IOError, exc:
            logging.warning(exc)

def main():
    '''
    Main
    '''

    # Parse arguments
    parser = argparse.ArgumentParser(description=DESC)
    parser.add_argument('album', help="AlbumData.xml file",
                        type=os.path.expanduser)
    parser.add_argument('src', help="source photo directory",
                        type=os.path.expanduser)
    parser.add_argument('dst', help="destination photo directory",
                        type=os.path.expanduser)
    args = parser.parse_args()

    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s',
                        filename='log', level=logging.INFO)

    logging.info("Starting run")

    # Check that destination directory doesn't exist
    try:
        os.mkdir(args.dst)
    except OSError:
        logging.error("%s already exists and I'm no good with dups", args.dst)
        return 1

    # Open XML album
    tree = ET.parse(args.album)
    root = tree.getroot()

    # Find roll and image lists
    rolllist = ephoto.sibling(root[0], 'List of Rolls')
    imagelist = ephoto.sibling(root[0], 'Master Image List')

    # Load rolls
    rolls = {}
    for roll in rolllist:
        # Make roll name filesystem-compatible 
        rollname = ephoto.sibling(roll, 'RollName').text
        rollname = rollname.replace('/', ',')

        # Choose roll directory name
        dst = '%s/%s' % (args.dst, rollname)
        if os.path.exists(dst):
            dst = '%s/%s-2' % (args.dst, rollname)

        # Map photo to roll directory
        for key in ephoto.sibling(roll, 'KeyList'):
            if key.text in rolls:
                logging.warning("%s already belongs to %s", key, dst)
            else:
                rolls[key.text] = dst
            
    # Move photos
    for tag in imagelist:
        if tag.tag == 'key':
            key = tag.text
        elif tag.tag == 'dict':
            # Resolve path

            # ImagePath is the original if the image hasn't been modified.
            # Otherwise, it's the modified version, and OriginalPath becomes
            # the original.

            # Is there and OriginalPath, i.e. has the picture been modified?
            origpath = ephoto.sibling(tag, 'OriginalPath')
            imgpath = ephoto.sibling(tag, 'ImagePath')
            if origpath is None:
                move(args.src, rolls, key, imgpath, modified=False)
            else:
                move(args.src, rolls, key, origpath, modified=False)
                move(args.src, rolls, key, imgpath, modified=True)
        else:
            logging.warning("Unexpected tag")

    logging.info("Ending run")

if __name__ == '__main__':
    sys.exit(main())

# vim: nowrap
